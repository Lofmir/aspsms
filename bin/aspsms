#!/usr/bin/env ruby
# vim: set et ts=2 sw=2 ft=ruby:
#
# Ruby ASPSMS -- aspsms.com short message service gateway library and client
# http://www.roe.ch/ASPSMS
#
# Copyright (C) 2005-2012, Daniel Roethlisberger <daniel@roe.ch>
# All rights reserved.
#
# Redistribution and use, with or without modification, are permitted
# provided that the following conditions are met:
# 1. Redistributions must retain the above copyright notice, this list of
#    conditions and the following disclaimer.
# 2. The name of the author may not be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'aspsms'
require 'getoptlong'

class String
  def is_phone_number?
    self.match(/^\+[0-9]{2,20}$/)
  end
end

$bn = File.basename($0)

def usage
  puts <<EOF
Usage:
  #{$bn} [-M] [-v] [-c file] [-o orig] [-t [n]] [-f] [-b] rcpt [...]
  #{$bn}  -C  [-v] [-c file]
  #{$bn}  -O  [-v] [-c file] [-o orig]
  #{$bn}  -U  [-v] [-c file] [-o orig] [-u code]
Actions:
  -M    send text message read from stdin (implied if recipients are given)
  -C    retrieve credit balance
  -O    check originator authorization
  -U    send originator unlock code; unlock if used with -u
Parameters:
  -o    specify originator (phone number or up to 11 characters)
  -t    truncate message to n bytes, or 160 if used without argument
  -f/-b flashing/blinking text SMS
  -u    specify unlock code
  -c    specify config file (default: ~/.aspsms, [/usr/local]/etc/aspsms)
  -v    verbose
  -h/-V show help/version and exit
Recipient phone number format: international format, e.g. +41XXXXXXXXX
EOF
end

def die(reason, detail = nil)
  STDERR.print "#{$0}: #{reason}"
  STDERR.puts detail.nil? ? '' : " -- #{detail}"
  exit 1
end

actions = []
truncate = -1
code = nil
cf = nil
verbose = false
opts = {}
begin
  GetoptLong.new(
    [ "-M", GetoptLong::NO_ARGUMENT ],
    [ "-C", GetoptLong::NO_ARGUMENT ],
    [ "-O", GetoptLong::NO_ARGUMENT ],
    [ "-U", GetoptLong::NO_ARGUMENT ],
    [ "-o", GetoptLong::REQUIRED_ARGUMENT ],
    [ "-t", GetoptLong::OPTIONAL_ARGUMENT ],
    [ "-f", GetoptLong::NO_ARGUMENT ],
    [ "-b", GetoptLong::NO_ARGUMENT ],
    [ "-u", GetoptLong::REQUIRED_ARGUMENT ],
    [ "-c", GetoptLong::REQUIRED_ARGUMENT ],
    [ "-v", GetoptLong::NO_ARGUMENT ],
    [ "-h", GetoptLong::NO_ARGUMENT ],
    [ "-V", GetoptLong::NO_ARGUMENT ]
  ).each do |opt, arg|
    case opt
    when '-h'
      usage
      exit 0
    when '-V'
      puts "#{$bn}: Ruby ASPSMS"
      puts "Copyright (C) 2005-2011, Daniel Roethlisberger <daniel@roe.ch>"
      puts "http://www.roe.ch/ASPSMS"
      exit 0
    when '-M'
      actions << :textsms
    when '-C'
      actions << :credits
    when '-O'
      actions << :auth
    when '-U'
      actions << :unlock
    when '-o'
      opts[:originator] = arg
    when '-t'
      unless arg.empty? || arg.to_i > 0
        die('invalid option argument', '-t expects positive integer')
      end
      truncate = arg.empty? ? 160 : arg.to_i
    when '-f'
      opts[:flashing] = true
    when '-b'
      opts[:blinking] = true
    when '-u'
      code = arg
    when '-c'
      cf = arg
    when '-v'
      verbose = true
    end
  end
rescue GetoptLong::MissingArgument, GetoptLong::InvalidOption
  exit 1
end
actions << :textsms unless ARGV.empty? || actions.include?(:textsms)

if actions.length > 1
  die('incompatible options', '-M, -C, -O and -U mutually exclusive')
end
if actions[0] != :textsms && (truncate > 0 ||
                              opts.has_key?(:flashing) ||
                              opts.has_key?(:blinking))
  die('incompatible options', '-t, -f and -b require -M')
end
if actions[0] != :unlock && !code.nil?
  die('incompatible options', '-c requires -U')
end
if actions.include?(:credits) && opts.has_key?(:originator)
  die('incompatible options', '-o requires -M, -O or -U')
end

# XXX catch exceptions and print more sensible error messages;
#     add custom exception classes to the ASPSMS:: namespace.
aspsms = ASPSMS::Easy.new(cf)
actions.each do |action|
  case action
  when :credits
    credits = aspsms.show_credits
    print credits
    puts verbose ? ' credits' : ''
    exit credits.to_i > 0 ? 0 : 1
  when :auth
    res = aspsms.check_originator_authorization(opts)
    puts res ? 'authorized' : 'not authorized' if verbose
    exit res ? 0 : 1
  when :unlock
    if code.nil?
      res = aspsms.send_originator_unlock_code(opts)
      puts 'sent unlock code' if verbose
    else
      res = aspsms.unlock_originator(code, opts)
      puts 'unlocked originator' if verbose
    end
    exit 0
  when :textsms
    rcpt = ARGV.dup
    rcpt.each do |rcpt|
      unless rcpt.is_phone_number?
        die('invalid phone number', rcpt)
      end
    end
    text = STDIN.read.gsub(/\s+/, ' ').gsub(/^\s+|\s+$/, '')
    text = text[0..(truncate - 1)] if truncate > 0
    credits_used = aspsms.send_text_sms(text, rcpt, opts)
    puts "message delivered (#{credits_used} credits used)" if verbose
    exit 0
  end
end
usage
exit 1

